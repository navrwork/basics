package com.navr.learn.java17;

import java.util.Objects;

/**
 * Records are immutable data classes that require only the type and name of fields. <br/>
 * The equals, hashCode, and toString methods, as well as the private, final fields and
 * public constructor, are generated by the Java compiler.
 */
public class RecordEx {
    public static void main(String[] args) {
        simplePerson();
        normalPerson();
        strangePerson();
    }

    private static void simplePerson() {
        SimplePerson simplePerson = new SimplePerson("simple", 11);
        System.out.printf("simplePerson=%s%n", simplePerson);
        System.out.printf("simplePerson.name()=%s, simplePerson.age()=%d %n", simplePerson.name(), simplePerson.age());
    }

    private static void normalPerson() {
        NormalPerson normalPerson = new NormalPerson("normal", 22);
        System.out.printf("normalPerson=%s%n", normalPerson.toString());

//        NormalPerson np2 = new NormalPerson("zzz"); // CompilationError: Expected 2 arguments but found 1
    }

    private static void strangePerson() {
        System.out.printf("strangePerson: STRANGE_PERSON_NAME=%s%n", StrangePerson.STRANGE_PERSON_NAME);

        StrangePerson sp = StrangePerson.strange(99);
        System.out.printf("strangePerson: sp=%s%n", sp);
    }

}

record SimplePerson(String name, Integer age) {
}

record NormalPerson(String name, Integer age) {
    public NormalPerson {
        Objects.requireNonNull(name);
        Objects.requireNonNull(age);
    }
}

record StrangePerson(String name, Integer age) {
    public StrangePerson {
        Objects.requireNonNull(age);
    }

    // we can include static variables and methods in record classes
    public static String STRANGE_PERSON_NAME = "STRANGE!";

    // we can declare static methods using the same syntax as a class
    public static StrangePerson strange(int age) {
        return new StrangePerson(STRANGE_PERSON_NAME, age);
    }
}

